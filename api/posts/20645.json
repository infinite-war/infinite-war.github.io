{"title":"java 基本语法 (三)：面向对象、异常","slug":"java语法基础(三)：面向对象、异常","date":"2021-12-05","updated":"2022-01-31","comments":true,"path":"api/posts/20645.json","excerpt":null,"cover":"https://img-blog.csdnimg.cn/c64800e5dfd64e0390acf9434eab78e4.png?x-oss-process=image","covers":["https://img-blog.csdnimg.cn/c64800e5dfd64e0390acf9434eab78e4.png?x-oss-process=image","https://img-blog.csdnimg.cn/97890842bac5426b957acbd1e34fbb6e.png?x-oss-process=image","https://img-blog.csdnimg.cn/fb9c5a6ee282487bbd5dd9b949d2cec3.png?x-oss-process=image","https://img-blog.csdnimg.cn/d93095777e034a90830b6278a03e46be.png?x-oss-process=image"],"content":"<p>CSDN:<a href=\"https://blog.csdn.net/INFINITE_WAR/article/details/121735812\">https://blog.csdn.net/INFINITE_WAR/article/details/121735812</a></p>\n<h1 id=\"java 面向对象\"><a href=\"#java 面向对象\" class=\"headerlink\" title=\"java 面向对象\"></a>java 面向对象 </h1><p> 以类的方式组织代码，以对象的方式组织 (封装) 数据</p>\n<p>三大特性：封装、继承、多态</p>\n<h2 id=\"对象声明\"><a href=\"# 对象声明\" class=\"headerlink\" title=\"对象声明\"></a>对象声明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A x=<span class=\"keyword\">new</span> A();  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>new 为 x 分配一个内存空间，A()构造一个对象，可以在 A 类中自定义 A 的构造器。</p>\n<p>若类成员不加 private/public 关键字，将 <u> 默认为 public</u>(C++ 中是 private)</p>\n<h2 id=\"静态方法\"><a href=\"# 静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类 A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">staticFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is a static function&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commonFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is a common function&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A.staticFunction();   <span class=\"comment\">// 静态方法可以通过类直接调用</span></span><br><span class=\"line\">        A x=<span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        x.commonFunction();   <span class=\"comment\">// 非静态方法必须通过实例调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态方法也可以通过实例调用，不过会产生警告</p>\n<p>如：Static member ‘Mitchell.A.staticFunction()’ accessed via instance reference。 IDE 会建议只通过类来调用静态方法，可能是考虑到实例会被回收。</p>\n<h2 id=\"构造器\"><a href=\"# 构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student.class</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String id,String name,<span class=\"keyword\">int</span> age,<span class=\"keyword\">int</span> score)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id=id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score=score;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 学生信息记入成功 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">makeString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span>+name+<span class=\"string\">&quot;, 学号:&quot;</span>+id+<span class=\"string\">&quot;, 年龄:&quot;</span>+age+<span class=\"string\">&quot;, 成绩:&quot;</span>+score+<span class=\"string\">&quot; ]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student a=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;123456789&quot;</span>,<span class=\"string\">&quot; 张三 &quot;</span>,<span class=\"number\">19</span>,<span class=\"number\">90</span>);</span><br><span class=\"line\">        System.out.println(a.makeString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>IDEA 中通过 <u>alt+insert 键</u> 可以快速生成构造器以及其他常用方法。</p>\n<p>与 C++ 的相同之处：</p>\n<ol>\n<li>如果在已经定义了带参构造器的情况下还想调用无参构造器，则必须在类中写出无参构造器的实现。</li>\n</ol>\n<p>与 C++ 的不同之处：</p>\n<ol>\n<li>java 不用手动管理内存(有垃圾回收机制)，不用像 C++ 一样写出析构函数(以及使用 delete 关键字)。</li>\n<li>java 构造器中，若成员变量和使用的参数命名冲突，则必须调用 this 来获取成员变量(如上述 Student 类中”this.id=id”)。C++ 对这种情况不会报错。</li>\n<li>若类成员不加 private/public 关键字，java 将默认为 public，C++ 则默认为 private。</li>\n</ol>\n<h3 id=\"堆栈调用图解\"><a href=\"# 堆栈调用图解\" class=\"headerlink\" title=\"堆栈调用图解\"></a>堆栈调用图解 </h3><p> 方法区属于堆</p>\n<p><img src=\"https://img-blog.csdnimg.cn/c64800e5dfd64e0390acf9434eab78e4.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"封装\"><a href=\"# 封装\" class=\"headerlink\" title=\"封装\"></a>封装 </h2><p> 目的：高内聚，低耦合。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合指仅暴露少量的方法给外部使用。</p>\n<p>与 C++ 一样，私有成员若要通过对象操作，需要额外定义一些方法。</p>\n<p>IDEA 使用 alt+insert 中的 getter 和 setter 选项可以直接生成对特定私有成员变量的最简操作方法。</p>\n<h2 id=\"继承\"><a href=\"# 继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>java 中只有单继承。（C++ 允许多继承）</p>\n<p>java 中所有类都默认继承 Object 类，所以即使是一个空的类也会内含一些从 Object 继承过来的方法。</p>\n<p>java 通过 extends 关键字表示继承。IDEA 中通过 ctrl+H 可以打开继承树。</p>\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>this</th>\n<th>super</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代表的对象不同</td>\n<td>当前类的引用</td>\n<td>当前类的父类的引用</td>\n</tr>\n<tr>\n<td>前提</td>\n<td>没有继承也可以使用</td>\n<td>必须有继承条件才能使用(一般都能用，因为都会继承自 Object 类)</td>\n</tr>\n<tr>\n<td>构造方法</td>\n<td>this()本类的构造</td>\n<td>super()父类的构造</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person.java    父类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> Mitchell;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name=<span class=\"string\">&quot;UNKNOW&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age=-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student    子类 </span></span><br><span class=\"line\"><span class=\"keyword\">package</span> Mitchell;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();    <span class=\"comment\">// 调用父类的无参构造方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*public Student(String name, int age) &#123;   // 这个方法与下一个方法效果相同</span></span><br><span class=\"line\"><span class=\"comment\">        super(name, age);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(name);   <span class=\"comment\">// 调用当前类的第二个方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age=age;    </span><br><span class=\"line\">        <span class=\"comment\">//this(age);   </span></span><br><span class=\"line\">        <span class=\"comment\">//this() 只能调用一次，因为它必须放在第一句，如果用了两个或两种 this()，会报错</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> Mitchell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student x=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 张三 &quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[&quot;</span>+x.name+<span class=\"string\">&quot;,&quot;</span>+x.age+<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出  [张三,18]</span></span><br></pre></td></tr></table></figure>\n\n<p>注：</p>\n<ol>\n<li>super 调用父类的构造方法，必须放在构造方法中的第一句。</li>\n<li>super 必须只出现在子类的方法或构造方法中。</li>\n<li>super 和 this 不能同时用在同一个构造方法中。</li>\n</ol>\n<p>可参考博客：<a href=\"https://blog.csdn.net/lncsdn_123/article/details/79025525\">https://blog.csdn.net/lncsdn_123/article/details/79025525</a></p>\n<h3 id=\"方法重写\"><a href=\"# 方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写 </h3><p> 重写原因：父类的功能，子类不一定需要，或不一定适合子类使用。</p>\n<p>@Override   表示重写，是一个有功能的注释。IDEA 中可以通过 alt+insert–&gt;override 进行方法重载。</p>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//B.java   父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B--&gt;test()&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//A.java   子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A--&gt;test()&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        A a=<span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        a.test();   <span class=\"comment\">// 调用 A 的 test()</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        B b=<span class=\"keyword\">new</span> A();   <span class=\"comment\">// 父类的引用指向了子类</span></span><br><span class=\"line\">        b.test();    <span class=\"comment\">// 本来会调用 B 的 test，但是当前的 b 指向的是类 A 创建的对象，且 test() 方法被类 A 重载了。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 两个 test 都输出  &quot;A--&gt;test()&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>重写方法注意：</p>\n<ol>\n<li>方法名、参数列表必须完全相同。</li>\n<li>修饰符：重载后范围可以扩大，但是不能缩小。  (范围：public&gt;protected&gt;default&gt;private)</li>\n<li>抛出的异常：重载后的异常范围可以缩小，但是不能扩大。如 ClassNotFoundException&lt;Exception</li>\n</ol>\n<h2 id=\"多态\"><a href=\"# 多态\" class=\"headerlink\" title=\"多态\"></a>多态 </h2><p> 同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p>\n<p>多态存在的条件：</p>\n<ol>\n<li>有继承关系。</li>\n<li>子类重写父类的方法。</li>\n<li>父类引用指向子类的对象。</li>\n</ol>\n<p>一个类的实例是确定的，但是指向这个实例的对象不是确定的。<br>假设 Student 继承了 Person，则可以如下声明对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s1=<span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">Person s2=<span class=\"keyword\">new</span> Student();  <span class=\"comment\">// 父类指向直接子类</span></span><br><span class=\"line\">Object s3=<span class=\"keyword\">new</span> Student();  <span class=\"comment\">// 父类指向间接子类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个对象能使用哪些方法跟 &quot;=&quot; 号左边的类型有关。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果同一个方法子类有重载，就会调用子类的方法，否则调用 &quot;=&quot; 号左边类的相关方法。</span></span><br></pre></td></tr></table></figure>\n\n<p>父类不能直接调用子类独有的方法。</p>\n<p>假设 Student 有一个方法 a()，而其父类 Person 没有。若父类对象要调用 a()，可以如下表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((Student)s2).a();   <span class=\"comment\">// 把父类对象强制转换成子类对象</span></span><br></pre></td></tr></table></figure>\n\n<p>上述方式的强制转换只是临时的，如果接下来还想调用方法 a()的话仍然要按上述方式。<br>当然还可以新建一个对象 (假设为 x) 存储强制转换后的 s2 对象，这样 x 可以直接调用 a()。</p>\n<p>类型转换异常：ClassCastException。</p>\n<p>带 static、final、private 关键字的方法不能被重写。</p>\n<p>注：</p>\n<ol>\n<li>父类引用可以指向子类的对象。</li>\n<li>子类对象转换为父类对象为向上转型，可以自动执行，不过可能会丢失一些子类中的方法。</li>\n<li>父类对象转换为子类对象为向下转型，需要执行强制转换。</li>\n</ol>\n<h2 id=\"static 静态代码块\"><a href=\"#static 静态代码块\" class=\"headerlink\" title=\"static 静态代码块\"></a>static 静态代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 匿名代码块 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 最先执行，且只执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 静态代码块 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloWorld</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 构造方法 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HelloWorld x1=<span class=\"keyword\">new</span> HelloWorld();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;================&quot;</span>);</span><br><span class=\"line\">        HelloWorld x2=<span class=\"keyword\">new</span> HelloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// 静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 匿名代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">//================</span></span><br><span class=\"line\"><span class=\"comment\">// 匿名代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 构造方法</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"抽象类\"><a href=\"# 抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类 </h2><p> 声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> abstruct <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> abstruct <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象方法通过继承在非抽象子类中进行具体实现。</p>\n<p>注：</p>\n<ol>\n<li>抽象类不能构建实例。不过抽象类中可以写构造器。</li>\n<li>抽象类中可以写普通方法。</li>\n<li>抽象方法只能写在抽象类中。</li>\n</ol>\n<h2 id=\"接口\"><a href=\"# 接口\" class=\"headerlink\" title=\"接口\"></a>接口 </h2><p><strong> 接口可以多继承</strong></p>\n<p>接口可以算作特殊的抽象类，它的内部 <u> 只有抽象方法</u>。</p>\n<p>声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserServices</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 抽象方法或其他成员</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口中的抽象方法不用写 public abstruct 这些关键字。直接写函数定义即可，<br>如：void function(int x);<br>接口默认为抽象方式</p>\n<p>接口中也可以定义常量，一般用 public static final 修饰，不过用处不大。</p>\n<p>接口通过关键字 implement 实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceimp</span> <span class=\"keyword\">implements</span> <span class=\"title\">Uservices</span></span>&#123;  <span class=\"comment\">// 可以同时实现多个接口</span></span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"内部类\"><a href=\"# 内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类 </h2><p> 更详细内容可参考博客：<a href=\"https://www.cnblogs.com/dolphin0520/p/3811445.html\">https://www.cnblogs.com/dolphin0520/p/3811445.html</a></p>\n<h3 id=\"成员内部类\"><a href=\"# 成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一种方式：</span></span><br><span class=\"line\">        Outter outter = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner inner = outter.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;   <span class=\"comment\">// 必须通过 Outter 对象来创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 第二种方式：</span></span><br><span class=\"line\">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;    <span class=\"comment\">// 外部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Inner inner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Outter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Inner <span class=\"title\">getInnerInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inner == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            inner = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;   <span class=\"comment\">// 内部类, 可以访问外部类的 private 类型成员</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b=-<span class=\"number\">1</span>;     <span class=\"comment\">// 内部类的 private 只能通过外部类访问，若为 public 则其他地方都可以直接访问</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成员内部类可以无条件访问外部类的所有成员属性和成员方法(包括 private 成员和静态成员)。</p>\n<h3 id=\"局部内部类\"><a href=\"# 局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类 </h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Man</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">getWoman</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123;   <span class=\"comment\">// 局部内部类，当前的类只能访问 getWoman() 作用域内的资源</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> age =<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>局部内部类的访问仅限于方法内或者该作用域内。</p>\n<p>局部内部类不能加 private 等关键字修饰它的成员。</p>\n<h3 id=\"匿名内部类\"><a href=\"# 匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类 </h3><p> 这种类不需要提供类名就能直接实例化。而且只能用 new 来声明匿名内部类的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PA</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot; 在 A 类内部 &quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 创建的匿名类继承了 A 类</span></span><br><span class=\"line\">      A p1 = <span class=\"keyword\">new</span> A() &#123;     <span class=\"comment\">// 匿名内部类的声明</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; 在匿名类内部 &quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      p1.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       Demo an = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">       an.createClass();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名内部类不能是抽象类。</p>\n<p>匿名内部类不能定义构造器。由于匿名内部类 <u> 没有类名</u>，所以无法定义构造器，但匿名内部类可以初始化块，可以通过初始化块来完成构造器需要完成的工作。</p>\n<h3 id=\"静态内部类\"><a href=\"# 静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类 </h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        Outter.Inner inner = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Outter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;  <span class=\"comment\">// 静态内部类</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">             System.out.println(b);  <span class=\"comment\">// 可以访问外部类的 static 成员，非 static 成员(如 a) 不可访问</span></span><br><span class=\"line\">            <span class=\"comment\">// 外部类的非 static 成员必须依附于具体的对象</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"异常\"><a href=\"# 异常\" class=\"headerlink\" title=\"异常\"></a>异常 </h1><h2 id=\"异常的分类\"><a href=\"# 异常的分类\" class=\"headerlink\" title=\"异常的分类\"></a> 异常的分类</h2><ol>\n<li>检查性异常：用户的错误 (或问题) 而导致的异常，程序员无法预见这类异常。比如要打开一个不存在的文件时，会触发相关异常。</li>\n<li>运行时异常：可能被程序员发现并避免。</li>\n<li>错误(ERROR)：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略、例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到。</li>\n</ol>\n<h2 id=\"相关类\"><a href=\"# 相关类\" class=\"headerlink\" title=\"相关类\"></a>相关类</h2><p>Java 把异常当作对象来处理，并定义了一个积累 java.lang.Throwable 作为所有异常的超类。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/97890842bac5426b957acbd1e34fbb6e.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h2><p>Error 类对象由 JVM 生成并抛出，大多数错误与代码编写者所执行的操作无关。</p>\n<p>JVM 运行错误(Virtual MachineErroe)，当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError 错误。这类错误发生时，JVM 一般会选择终止线程。</p>\n<p>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、连接错误(LinkageError)，这些错误不可查，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p>\n<h2 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h2><p>常见的运行时异常(RuntimeException)</p>\n<table>\n<thead>\n<tr>\n<th>异常名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayIndexOutOfBoundException</td>\n<td>数组下标越界</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>空指针异常</td>\n</tr>\n<tr>\n<td>ArithmeticException</td>\n<td>算数异常</td>\n</tr>\n<tr>\n<td>MissingResourceException</td>\n<td>丢失资源</td>\n</tr>\n<tr>\n<td>ClassNotFoundException</td>\n<td>找不到类</td>\n</tr>\n</tbody></table>\n<h2 id=\"捕获和抛出异常\"><a href=\"# 捕获和抛出异常\" class=\"headerlink\" title=\"捕获和抛出异常\"></a>捕获和抛出异常 </h2><p> 相关关键字：try、catch、finally、throw、throws</p>\n<h3 id=\"try、catch、finally\"><a href=\"#try、catch、finally\" class=\"headerlink\" title=\"try、catch、finally\"></a>try、catch、finally</h3><p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b=<span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123; <span class=\"comment\">// 监控可能会出现异常的区域</span></span><br><span class=\"line\">            System.out.println(a/b);    <span class=\"comment\">// 1/0 会出现 ArithmeticException 异常，后两句会直接跳过进入 catch</span></span><br><span class=\"line\">            a++;</span><br><span class=\"line\">            b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span>(ArithmeticException e)&#123;   <span class=\"comment\">// 若捕获到相关异常，就执行 catch 中的语句</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; 程序出现异常，b 不能为 0&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>&#123;   <span class=\"comment\">//finally 中的语句一定会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，ArithmeticException 是 Exception 的子类，如果 catch 中定义的是 Throwable 或 Exception 对象，则所有异常都可以捕获。异常捕获结束之后程序仍旧会运行。</p>\n<p>catch 可以写多个，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(...)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(...)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过 catch 中的异常范围必须逐步增大，比如第一个 catch()中写了 Exception 对象，那么第二个 catch()中就不能写 ArithmeticException 等类似的异常对象，因为他们是 Exception 的子类，范围更小。</p>\n<p>IDEA 中可以通过 ctrl+alt+T 快速创建 if-else、try-catch 等结构语句。</p>\n<h3 id=\"throw、throws\"><a href=\"#throw、throws\" class=\"headerlink\" title=\"throw、throws\"></a>throw、throws</h3><p>throw 可以主动抛出异常，这里的异常是一个实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArithmeticException(); <span class=\"comment\">// 使用 throw 会提前报错结束线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(a/b);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>throws 用在方法中。主要是声明这个方法会抛出相关类型的异常，使它的调用者知道要捕获这个异常。throws 不会像 throw 一样直接输出错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner in=<span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(in.hasNext()) &#123;</span><br><span class=\"line\">            a = in.nextInt();</span><br><span class=\"line\">            b = in.nextInt();</span><br><span class=\"line\">            System.out.println(MainTest.test(a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> <span class=\"keyword\">throws</span> ArithmeticException</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArithmeticException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a/b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/fb9c5a6ee282487bbd5dd9b949d2cec3.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"自定义异常\"><a href=\"# 自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常 </h2><p> 写一个类来继承 Exception 类即自定义异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> detail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyException</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.detail=a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;MyException[&quot;</span>+<span class=\"string\">&quot; detail=&quot;</span>+detail+<span class=\"string\">&quot; ]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner in=<span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(in.hasNext()) &#123;</span><br><span class=\"line\">            a = in.nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                test(a);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (MyException e)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;MyException--&gt;&quot;</span>+e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> <span class=\"keyword\">throws</span> MyException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 传入的参数为 &quot;</span>+a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;OK&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/d93095777e034a90830b6278a03e46be.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"注\"><a href=\"# 注\" class=\"headerlink\" title=\"注\"></a>注</h2><ul>\n<li>处理运行时异常时，采用逻辑去合理规避的同时，辅助 try-catch 处理</li>\n<li>在多重 catch 快后面，可以加一个 catch(Exception)来处理可能会被遗漏的异常</li>\n<li>对于不确定的代码，也可以加上 try-catch，处理潜在的异常</li>\n<li>尽量去处理异常，切忌只是简单地调用 printStackTrace()去打印输出</li>\n<li>具体如何处理异常，要更具不同的业务需求和异常类型去决定</li>\n<li>尽量添加 finally 语句块去释放占用的资源</li>\n</ul>\n","url":"/posts/20645/","min2read":16,"word4post":"3.9k","prev_post":{"title":"Java 集合框架","url":"/posts/40254/"},"next_post":{"title":"java 基本语法 (二)","url":"/posts/54575/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"java 面向对象\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">java 面向对象 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"对象声明\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">对象声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"静态方法\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">静态方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"构造器\" href = \"#\"><span class=\"toc-number\">1.3.</span> <span class=\"toc-text\">构造器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"堆栈调用图解\" href = \"#\"><span class=\"toc-number\">1.3.1.</span> <span class=\"toc-text\">堆栈调用图解 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"封装\" href = \"#\"><span class=\"toc-number\">1.4.</span> <span class=\"toc-text\">封装 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"继承\" href = \"#\"><span class=\"toc-number\">1.5.</span> <span class=\"toc-text\">继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"super\" href = \"#\"><span class=\"toc-number\">1.5.1.</span> <span class=\"toc-text\">super</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"方法重写\" href = \"#\"><span class=\"toc-number\">1.5.2.</span> <span class=\"toc-text\">方法重写 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"多态\" href = \"#\"><span class=\"toc-number\">1.6.</span> <span class=\"toc-text\">多态 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"static 静态代码块\" href = \"#\"><span class=\"toc-number\">1.7.</span> <span class=\"toc-text\">static 静态代码块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"抽象类\" href = \"#\"><span class=\"toc-number\">1.8.</span> <span class=\"toc-text\">抽象类 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"接口\" href = \"#\"><span class=\"toc-number\">1.9.</span> <span class=\"toc-text\">接口 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"内部类\" href = \"#\"><span class=\"toc-number\">1.10.</span> <span class=\"toc-text\">内部类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"成员内部类\" href = \"#\"><span class=\"toc-number\">1.10.1.</span> <span class=\"toc-text\">成员内部类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"局部内部类\" href = \"#\"><span class=\"toc-number\">1.10.2.</span> <span class=\"toc-text\">局部内部类 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"匿名内部类\" href = \"#\"><span class=\"toc-number\">1.10.3.</span> <span class=\"toc-text\">匿名内部类 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"静态内部类\" href = \"#\"><span class=\"toc-number\">1.10.4.</span> <span class=\"toc-text\">静态内部类 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"异常\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">异常 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"异常的分类\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\"> 异常的分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"相关类\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">相关类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Error\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">Error</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Exception\" href = \"#\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">Exception</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"捕获和抛出异常\" href = \"#\"><span class=\"toc-number\">2.5.</span> <span class=\"toc-text\">捕获和抛出异常 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"try、catch、finally\" href = \"#\"><span class=\"toc-number\">2.5.1.</span> <span class=\"toc-text\">try、catch、finally</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"throw、throws\" href = \"#\"><span class=\"toc-number\">2.5.2.</span> <span class=\"toc-text\">throw、throws</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义异常\" href = \"#\"><span class=\"toc-number\">2.6.</span> <span class=\"toc-text\">自定义异常 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"注\" href = \"#\"><span class=\"toc-number\">2.7.</span> <span class=\"toc-text\">注</span></a></li></ol></li></ol>","categories":[],"tags":[{"name":"JavaSE","path":"api/tags/JavaSE.json","url":"/tags/JavaSE/"}]}