{"title":"Java 集合框架","slug":"Java集合框架","date":"2022-01-13","updated":"2022-01-31","comments":true,"path":"api/posts/40254.json","excerpt":null,"cover":"https://img-blog.csdnimg.cn/6e7feccda34d4010a45312e77833cd19.png?x-oss-process=image","covers":["https://img-blog.csdnimg.cn/6e7feccda34d4010a45312e77833cd19.png?x-oss-process=image","https://img-blog.csdnimg.cn/bea13023154740c09afff80ab9e1ea47.png?x-oss-process=image","https://img-blog.csdnimg.cn/40defd4181e240a2953ee1d81eb95d8c.png?x-oss-process=image","https://img-blog.csdnimg.cn/12301fea177d4b95984e89e014f483af.png?x-oss-process=image","https://img-blog.csdnimg.cn/b27398f822854d358b81c23d081e30ef.png?x-oss-process=image","https://img-blog.csdnimg.cn/987e63f6d4674049bfdfd52425abccea.png#pic_center","https://img-blog.csdnimg.cn/1e3e8b439b5249dc9cc1f85a1d7133d6.png#pic_center","https://img-blog.csdnimg.cn/cf780f71a32c467a9415f30b17978e8e.png#pic_center","https://img-blog.csdnimg.cn/b973032b556f4bd29644bf219f7bb3ff.png?x-oss-process=image","https://img-blog.csdnimg.cn/fc2d499c0b1d4fc7a32f85e468d70ef3.png?x-oss-process=image","https://img-blog.csdnimg.cn/d73942a79f97435a8e78669968420f72.png?x-oss-process=image","https://img-blog.csdnimg.cn/1648b581d6734258b62456be4a4d1c09.png#pic_center","https://img-blog.csdnimg.cn/f421fd8398254032b4da0cfa7248fb71.png#pic_center","https://img-blog.csdnimg.cn/c7ec6256f06040d08cdebd960b694738.png#pic_center","https://img-blog.csdnimg.cn/6a0213577b164009a8a73239d85aa337.png?x-oss-process=image","https://img-blog.csdnimg.cn/551bfa5110ee4dad9cd52b54b0d7c8d6.png?x-oss-process=image","https://img-blog.csdnimg.cn/5e53edcafa2e4ca2b8882ebc759ea0f1.png?x-oss-process=image"],"content":"<h1 id=\"Java 集合框架\"><a href=\"#Java 集合框架\" class=\"headerlink\" title=\"Java 集合框架\"></a>Java 集合框架 </h1><p> 参考视频:【千锋】Java 集合框架详解   BV1zD4y1Q7Fw</p>\n<p>CSDN:<a href=\"https://blog.csdn.net/INFINITE_WAR/article/details/122465544\">https://blog.csdn.net/INFINITE_WAR/article/details/122465544</a></p>\n<h1 id=\"集合概述\"><a href=\"# 集合概述\" class=\"headerlink\" title=\"集合概述\"></a>集合概述 </h1><p> 目的：对象的容器，实现了对对象常用的操作</p>\n<p>与数组的区别：</p>\n<ol>\n<li>数组长度固定，集合长度不固定。</li>\n<li>数组刻意存储基本类型和引用类型，集合只能存储引用类型</li>\n</ol>\n<p>位置：java.util.*;</p>\n<p><img src=\"https://img-blog.csdnimg.cn/6e7feccda34d4010a45312e77833cd19.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"Colleection 接口\"><a href=\"#Colleection 接口\" class=\"headerlink\" title=\"Colleection 接口\"></a>Colleection 接口 </h1><p> 特点：代表一组任意类型的对象，无序、无下标、不能重复。</p>\n<p>常见方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object obj)</span>  <span class=\"comment\">// 添加一个对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection c)</span> <span class=\"comment\">// 将一个集合中的所有对象添加到此集合中</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>    <span class=\"comment\">// 清空所有对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contaions</span><span class=\"params\">(Object o)</span> <span class=\"comment\">// 检查此集合种是否包含 o 对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> <span class=\"comment\">// 比较此集合是否与指定对象相等</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>   <span class=\"comment\">// 判断集合是否为空</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span>  <span class=\"comment\">// 移出集合中的对象 o</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  <span class=\"comment\">// 当前集合中的元素个数</span></span></span><br><span class=\"line\"><span class=\"function\">Object[] <span class=\"title\">toArray</span><span class=\"params\">()</span>   <span class=\"comment\">// 将集合转换成数组</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试 1\"><a href=\"# 测试 1\" class=\"headerlink\" title=\"测试 1\"></a>测试 1</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Collection testCollection=<span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============== 添加元素 ===============&quot;</span>);</span><br><span class=\"line\">        testCollection.add(<span class=\"string\">&quot; 橘子 &quot;</span>);</span><br><span class=\"line\">        testCollectiwon.add(<span class=\"string\">&quot; 张三 &quot;</span>);</span><br><span class=\"line\">        testCollection.add(<span class=\"string\">&quot;Terminal&quot;</span>);</span><br><span class=\"line\">        testCollection.add(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数:&quot;</span>+testCollection.size());</span><br><span class=\"line\">        System.out.println(testCollection.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============== 删除元素 ===============&quot;</span>);</span><br><span class=\"line\">        testCollection.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数:&quot;</span>+testCollection.size());</span><br><span class=\"line\">        System.out.println(testCollection.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 普通遍历元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============= 普通遍历元素 =============&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数:&quot;</span>+testCollection.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object x:testCollection)&#123;</span><br><span class=\"line\">            System.out.println(x.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 迭代器遍历元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============= 迭代器遍历元素 =============&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数:&quot;</span>+testCollection.size());</span><br><span class=\"line\">        Iterator it=testCollection.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">            </span><br><span class=\"line\">      <span class=\"comment\">// 迭代器遍历过程中不能对 testCollection 使用方法。如 testClooection.remove(e);</span></span><br><span class=\"line\">      <span class=\"comment\">// 不过可以执行 it.remove()</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断集合是否为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========== 判断集合是否为空 ===========&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 集合为空？&quot;</span>+testCollection.isEmpty());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 执行 clear 方法 &quot;</span>);</span><br><span class=\"line\">        testCollection.clear();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 集合为空？&quot;</span>+testCollection.isEmpty());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/bea13023154740c09afff80ab9e1ea47.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"测试 2\"><a href=\"# 测试 2\" class=\"headerlink\" title=\"测试 2\"></a>测试 2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t学生类</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> + <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Collection testCollection=<span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        Student s1=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 张三 &quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        Student s2=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 李四 &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        Student s3=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 王五 &quot;</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加数据   同一个对象可以重复添加</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============= 添加数据 ================&quot;</span>);</span><br><span class=\"line\">        testCollection.add(s1);</span><br><span class=\"line\">        testCollection.add(s2);</span><br><span class=\"line\">        testCollection.add(s3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数：&quot;</span>+testCollection.size());</span><br><span class=\"line\">        System.out.println(testCollection.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============= 删除数据 ================&quot;</span>);</span><br><span class=\"line\">        testCollection.remove(s3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数：&quot;</span>+testCollection.size());</span><br><span class=\"line\">        System.out.println(testCollection.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历数据(迭代器)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============= 迭代器遍历 ================&quot;</span>);</span><br><span class=\"line\">        Iterator it=testCollection.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/40defd4181e240a2953ee1d81eb95d8c.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"List 接口与实现类\"><a href=\"#List 接口与实现类\" class=\"headerlink\" title=\"List 接口与实现类\"></a>List 接口与实现类 </h1><h2 id=\"List 接口\"><a href=\"#List 接口\" class=\"headerlink\" title=\"List 接口\"></a>List 接口</h2><p> 特点： 有序、有下标、元素可重复</p>\n<p>常见方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object o)</span>  <span class=\"comment\">// 在 index 位置插入对象 o</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(index,Collection c)</span> <span class=\"comment\">// 将集合 c 中的所有元素添加到该 List 集合的 index 位置</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"comment\">// 返回集合中指定位置的元素</span></span></span><br><span class=\"line\"><span class=\"function\">List <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span> <span class=\"comment\">// 返回 fromIndex 和 toIndex 之间的集合元素</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试\"><a href=\"# 测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加数据   同一个对象可以重复添加</span></span><br><span class=\"line\">        List testList=<span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        testList.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        testList.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        testList.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        testList.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        System.out.println(testList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除数据</span></span><br><span class=\"line\">        testList.remove(<span class=\"number\">0</span>);   <span class=\"comment\">// 等价于 testList.remove(&quot;c&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 普通遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;testList.size();i++)&#123;</span><br><span class=\"line\">            System.out.println(testList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 迭代器遍历</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 从左往右遍历 &quot;</span>);</span><br><span class=\"line\">        ListIterator it=testList.listIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 上面遍历完成后从右往左遍历 &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasPrevious())&#123;</span><br><span class=\"line\">            System.out.println(it.previous().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断有没有元素 &quot;c&quot;</span></span><br><span class=\"line\">        System.out.println(testList.contains(<span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 获取位置</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素 b 的位置:&quot;</span>+testList.indexOf(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 获取子串</span></span><br><span class=\"line\">        List subTest=testList.subList(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(subTest.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/12301fea177d4b95984e89e014f483af.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-2-List 实现类\"><a href=\"#2-2-List 实现类\" class=\"headerlink\" title=\"2.2 List 实现类\"></a>2.2 List 实现类 </h2><h3 id=\"2-2-1-ArrayList\"><a href=\"#2-2-1-ArrayList\" class=\"headerlink\" title=\"2.2.1 ArrayList\"></a>2.2.1 ArrayList</h3><p> 数组结构实现，查询快、增删慢。需要开辟连续空间。</p>\n<h4 id=\"ArrayList 测试\"><a href=\"#ArrayList 测试\" class=\"headerlink\" title=\"ArrayList 测试\"></a>ArrayList 测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加数据   同一个对象可以重复添加</span></span><br><span class=\"line\">        ArrayList test=<span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        Student s1=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 唐 &quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        Student s2=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 何 &quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        Student s3=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 余 &quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        test.add(s1);</span><br><span class=\"line\">        test.add(s2);</span><br><span class=\"line\">        test.add(s3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数：&quot;</span>+test.size());</span><br><span class=\"line\">        System.out.println(test.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除数据</span></span><br><span class=\"line\">        test.remove(s1);</span><br><span class=\"line\">        <span class=\"comment\">// 这里不能写成 test.remove(new Student(&quot; 唐 &quot;,21));</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里新建的对象与 s1 引用的是不同的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 迭代器遍历</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 从左往右遍历 &quot;</span>);</span><br><span class=\"line\">        ListIterator it=test.listIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 上面遍历完成后从右往左遍历 &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasPrevious())&#123;</span><br><span class=\"line\">            System.out.println(it.previous().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断</span></span><br><span class=\"line\">        System.out.println(test.isEmpty());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取位置  -1 代表没找到</span></span><br><span class=\"line\">        System.out.println(test.indexOf(s1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/b27398f822854d358b81c23d081e30ef.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"源码分析\"><a href=\"# 源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析 </h4><p> 默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></p>\n<p>存放元素的数组：<code>transient Object[] elementData;</code></p>\n<p>实际元素个数：<code>private int size;</code></p>\n<p>创建对象时调用的无参构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码说明当你没有向集合中添加任何元素时，集合容量为 0。</p>\n<p>默认的 10 个容量与下面的 add 方法相关：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>假设 new 了一个数组，当前容量为 0，size 当然也为 0。这时调用 add 方法进入到 ensureCapacityInternal(size + 1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>elementData 就是存放元素的数组，当前容量为 0，if 条件成立，返回默认容量 <code>DEFAULT_CAPACITY</code> 也就是 10。这个值作为参数又传入 <code>ensureExplicitCapacity()</code> 方法中，进入该方法查看源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已知 elementData.length=0，故 if 条件为真，调用 grow()函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法先声明了一个 oldCapacity 变量将数组长度赋给它，其值为 0；又声明了一个 newCapacity 变量其值为 <code>oldCapacity+ 一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为 0。<br> 第一个 if 条件满足，newCapacity 的值为 10。<br>第二个 if 条件不成立，也可以不用注意，因为 MAX_ARRAY_SIZE 的定义如下(数值很大)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure>\n\n<p>最后一句话是给 elementData 赋了一个新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个变量用于指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p>\n<p>这时候再回到 add 的方法中，接着就向下执行<code>elementData[size++] = e;</code></p>\n<h3 id=\"2-2-2-Vector\"><a href=\"#2-2-2-Vector\" class=\"headerlink\" title=\"2.2.2 Vector\"></a>2.2.2 Vector</h3><p>大体内容、特性与 ArrayList 差不多，现在已不常用。</p>\n<h3 id=\"2-2-3-LinkedList\"><a href=\"#2-2-3-LinkedList\" class=\"headerlink\" title=\"2.2.3 LinkedList\"></a>2.2.3 LinkedList</h3><p>特点：增删快，查询慢。无需开辟连续空间。</p>\n<p>大体方法与 ArrayList 相近</p>\n<h4 id=\"LinkedList 测试\"><a href=\"#LinkedList 测试\" class=\"headerlink\" title=\"LinkedList 测试\"></a>LinkedList 测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        LinkedList linkedList=<span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        Student s1=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 唐 &quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        Student s2=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 何 &quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        Student s3=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot; 余 &quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1. 添加元素</span></span><br><span class=\"line\">        linkedList.add(s1);</span><br><span class=\"line\">        linkedList.add(s2);</span><br><span class=\"line\">        linkedList.add(s3);</span><br><span class=\"line\">        linkedList.add(s3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 元素个数：&quot;</span>+linkedList.size());</span><br><span class=\"line\">        System.out.println(linkedList.toString());</span><br><span class=\"line\">        <span class=\"comment\">//2. 删除元素</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * linkedList.remove(new Student(&quot; 唐 &quot;, 21));</span></span><br><span class=\"line\"><span class=\"comment\">         * System.out.println(linkedList.toString());</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 遍历</span></span><br><span class=\"line\">        <span class=\"comment\">//3.1 使用 for</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;linkedList.size();++i) &#123;</span><br><span class=\"line\">            System.out.println(linkedList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.2 使用增强 for</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object object:linkedList) &#123;</span><br><span class=\"line\">            Student student=(Student) object;</span><br><span class=\"line\">            System.out.println(student.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.3 使用迭代器</span></span><br><span class=\"line\">        Iterator iterator =linkedList.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            Student student = (Student) iterator.next();</span><br><span class=\"line\">            System.out.println(student.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.4 使用列表迭代器（略）</span></span><br><span class=\"line\">        <span class=\"comment\">//4. 判断</span></span><br><span class=\"line\">        System.out.println(linkedList.contains(s1));</span><br><span class=\"line\">        System.out.println(linkedList.isEmpty());</span><br><span class=\"line\">        System.out.println(linkedList.indexOf(s3));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"源码分析 -1\"><a href=\"# 源码分析 -1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>LinkedList 首先有三个属性：</p>\n<p>链表大小：<code>transient int size = 0;</code></p>\n<p>（指向）第一个结点 / 头结点：<code> transient Node&lt;E&gt; first;</code></p>\n<p>（指向）最后一个结点 / 尾结点：<code>transient Node&lt;E&gt; last;</code></p>\n<p>Node 类型定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    E item;   <span class=\"comment\">// 当前结点的数据</span></span><br><span class=\"line\">    Node&lt;E&gt; next;    <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">    Node&lt;E&gt; prev;    <span class=\"comment\">// 上一个结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = element;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    linkLast(e);    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);   <span class=\"comment\">// 初始化要添加的新结点</span></span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)     <span class=\"comment\">// 添加结点前链表为空</span></span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"泛型和工具类\"><a href=\"# 泛型和工具类\" class=\"headerlink\" title=\"泛型和工具类\"></a>泛型和工具类 </h1><h2 id=\"泛型概述\"><a href=\"# 泛型概述\" class=\"headerlink\" title=\"泛型概述\"></a> 泛型概述</h2><p>Java 泛型是 JDK1.5 中引入的一个新特性，其本质是参数化类型，把类型作为参数进行传递</p>\n<p>常见形式：泛型类、泛型接口、泛型方法</p>\n<p>语法：<code>&lt;T,...&gt;</code> T 称为占位符，表示一种引用类型。习惯上会使用 T、E、K、V 等字母作为占位符。</p>\n<p>优点：</p>\n<ol>\n<li>提高代码的重用性</li>\n<li>防疫类型转换异常，提高代码的安全性</li>\n</ol>\n<h2 id=\"泛型类\"><a href=\"# 泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 泛型类</span></span><br><span class=\"line\"><span class=\"comment\"> * 语法：类名 &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * T 是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myGeneric</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1. 创建泛型变量</span></span><br><span class=\"line\">\t<span class=\"comment\">// 不能使用 new 来创建，如 T t=new T()，因为泛型是不确定的类型，也可能拥有私密的构造方法。</span></span><br><span class=\"line\">\tT t;</span><br><span class=\"line\">\t<span class=\"comment\">//2. 泛型作为方法的参数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 泛型作为方法的返回值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getT</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.*;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用泛型类创建对象</span></span><br><span class=\"line\">        myGeneric&lt;String&gt; myGeneric1=<span class=\"keyword\">new</span> myGeneric&lt;String&gt;();</span><br><span class=\"line\">        myGeneric1.t=<span class=\"string\">&quot;tang&quot;</span>;</span><br><span class=\"line\">        myGeneric1.show(<span class=\"string\">&quot;he&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        myGeneric&lt;Integer&gt; myGeneric2=<span class=\"keyword\">new</span> myGeneric&lt;Integer&gt;();</span><br><span class=\"line\">        myGeneric2.t=<span class=\"number\">10</span>;</span><br><span class=\"line\">        myGeneric2.show(<span class=\"number\">20</span>);</span><br><span class=\"line\">        Integer integer=myGeneric2.getT();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/987e63f6d4674049bfdfd52425abccea.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"泛型接口\"><a href=\"# 泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口 </h2><h3 id=\"实现接口时确定泛型类\"><a href=\"# 实现接口时确定泛型类\" class=\"headerlink\" title=\"实现接口时确定泛型类\"></a> 实现接口时确定泛型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 泛型接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 语法：接口名 &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：不能创建泛型静态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建常量</span></span><br><span class=\"line\">\tString nameString=<span class=\"string\">&quot;tang&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">server</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口时确定泛型类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterfaceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">MyInterface</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">server</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyInterfaceImpl myInterfaceImpl=<span class=\"keyword\">new</span> MyInterfaceImpl();</span><br><span class=\"line\">        myInterfaceImpl.server(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实现接口时不确定泛型类\"><a href=\"# 实现接口时不确定泛型类\" class=\"headerlink\" title=\"实现接口时不确定泛型类\"></a>实现接口时不确定泛型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口时不确定泛型类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterfaceImpl2</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">MyInterface</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">server</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyInterfaceImpl myInterfaceImpl=<span class=\"keyword\">new</span> MyInterfaceImpl();</span><br><span class=\"line\">        myInterfaceImpl.server(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"泛型方法\"><a href=\"# 泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 泛型方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 语法：&lt;T&gt; 返回类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGenericMethod</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 泛型方法 &quot;</span>+t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyGenericMethod myGenericMethod=<span class=\"keyword\">new</span> MyGenericMethod();</span><br><span class=\"line\">        myGenericMethod.show(<span class=\"string\">&quot;bbbbb&quot;</span>);</span><br><span class=\"line\">        myGenericMethod.show(<span class=\"number\">123</span>);</span><br><span class=\"line\">        myGenericMethod.show(<span class=\"number\">3.14159</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/1e3e8b439b5249dc9cc1f85a1d7133d6.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"泛型集合\"><a href=\"# 泛型集合\" class=\"headerlink\" title=\"泛型集合\"></a>泛型集合 </h2><p> 定义：参数化类型、类型安全的集合，强制集合元素的类型必须一致</p>\n<p>特点：</p>\n<ol>\n<li>编译时即可检查，而非运行时抛出异常</li>\n<li>访问时，不必类型转换(即拆箱)</li>\n<li>不同泛型之间的引用不能相互赋值。泛型不存在多态</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LinkedList&lt;String&gt;list=<span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//list.add(3); 会直接报错</span></span><br><span class=\"line\">        System.out.println(list.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如使用泛型集合时不声明相关泛型参数，即<code>new LinkedList&lt;&gt;();</code>，会默认传递 Object 类型。</p>\n<h1 id=\"Set 接口与实现类\"><a href=\"#Set 接口与实现类\" class=\"headerlink\" title=\"Set 接口与实现类\"></a>Set 接口与实现类 </h1><h2 id=\"Set 接口\"><a href=\"#Set 接口\" class=\"headerlink\" title=\"Set 接口\"></a>Set 接口</h2><p> 特点：无序、无下标、元素不可重复</p>\n<p>方法：全部继承自 Collection 中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试 Set 接口的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 特点：1. 无序，没有下标；2. 重复</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 添加数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 删除数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 判断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; set=<span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 添加数据</span></span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;tang&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;he&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;yu&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 数据个数：&quot;</span>+set.size());</span><br><span class=\"line\">\t\tSystem.out.println(set.toString());<span class=\"comment\">// 无序输出</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 删除数据</span></span><br><span class=\"line\">\t\tset.remove(<span class=\"string\">&quot;tang&quot;</span>);</span><br><span class=\"line\">        System.out.println(set.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//3.1 使用增强 for</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String string : set) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.2 使用迭代器</span></span><br><span class=\"line\">\t\tIterator&lt;String&gt; iterator=set.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(iterator.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 判断</span></span><br><span class=\"line\">\t\tSystem.out.println(set.contains(<span class=\"string\">&quot;tang&quot;</span>));</span><br><span class=\"line\">\t\tSystem.out.println(set.isEmpty());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/cf780f71a32c467a9415f30b17978e8e.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"Set 实现类\"><a href=\"#Set 实现类\" class=\"headerlink\" title=\"Set 实现类\"></a>Set 实现类 </h2><h3 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h3><p> 基于 HashCode 计算元素存放位置</p>\n<p>当存入元素的 hashcode 相同时，会调用 equals 进行确认，若结果为 true，则拒绝存储</p>\n<h4 id=\"测试 -1\"><a href=\"# 测试 -1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Person 类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Peerson [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * HashSet 集合的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 存储结构：哈希表（数组 + 链表 + 红黑树）</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 添加元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 删除元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 判断</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tHashSet&lt;Person&gt; hashSet=<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">\t\tPerson p1=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;tang&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">\t\tPerson p2=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">\t\tPerson p3=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;yu&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 添加元素</span></span><br><span class=\"line\">\t\thashSet.add(p1);</span><br><span class=\"line\">\t\thashSet.add(p2);</span><br><span class=\"line\">\t\thashSet.add(p3);</span><br><span class=\"line\">        <span class=\"comment\">// 重复，添加失败</span></span><br><span class=\"line\">        hashSet.add(p3);</span><br><span class=\"line\">        <span class=\"comment\">// 直接 new 一个相同属性的对象，依然会被添加，不难理解。</span></span><br><span class=\"line\">        <span class=\"comment\">// 假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class=\"line\">        hashSet.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;yu&quot;</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\">\t\tSystem.out.println(hashSet.toString());</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 删除元素</span></span><br><span class=\"line\">\t\thashSet.remove(p2);</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 遍历</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3.1 增强 for</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Person person : hashSet) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(person);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.2 迭代器</span></span><br><span class=\"line\">\t\tIterator&lt;Person&gt; iterator=hashSet.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(iterator.next());\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 判断</span></span><br><span class=\"line\">\t\tSystem.out.println(hashSet.isEmpty());</span><br><span class=\"line\">        <span class=\"comment\">// 直接 new 一个相同属性的对象结果输出是 false，不难理解。</span></span><br><span class=\"line\">        <span class=\"comment\">// 注：假如相同属性便认为是同一个对象，该怎么做？</span></span><br><span class=\"line\">\t\tSystem.out.println(hashSet.contains(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;tang&quot;</span>, <span class=\"number\">21</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/b973032b556f4bd29644bf219f7bb3ff.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"内部哈希表存储过程\"><a href=\"# 内部哈希表存储过程\" class=\"headerlink\" title=\"内部哈希表存储过程\"></a>内部哈希表存储过程</h4><ol>\n<li><p>根据 hashCode 计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</p>\n</li>\n<li><p>执行 equals 方法，如果方法返回 true，则认为是重复，拒绝存储，否则形成 <u> 链表</u>(当一个位置的链表过长时会改用红黑树存储)。</p>\n</li>\n</ol>\n<p>数组 + 链表的形式</p>\n<p><img src=\"https://img-blog.csdnimg.cn/fc2d499c0b1d4fc7a32f85e468d70ef3.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>数组 + 红黑树的形式</p>\n<p>单个哈希地址的结点过多时，为了方便查找，会将同地址结点的存储方式改为红黑树</p>\n<p><img src=\"https://img-blog.csdnimg.cn/d73942a79f97435a8e78669968420f72.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>要实现一开始所说的两步存储过程，可以重载 hashCode 和 equals 代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 使用 31 的原因：</span></span><br><span class=\"line\"><span class=\"comment\">    * 1.31 是一个质数，这样的数字在计算时可以尽量减少哈希冲突</span></span><br><span class=\"line\"><span class=\"comment\">    * 2. 可以提高执行效率，31*i=(i&lt;&lt;5)-i,31 乘以一个数可以转换成移位操作</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">    result = prime * result + age;</span><br><span class=\"line\">    result = prime * result + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Person other = (Person) obj;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age != other.age)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><ul>\n<li>基于排序顺序实现不重复</li>\n<li>实现了 SortedSet 接口，对集合元素自动排序</li>\n<li>元素对象的类型必须实现 Comparable 接口，指定排序规则</li>\n<li>通过 CompareTo 方法确定是否为重复元素</li>\n</ul>\n<h4 id=\"测试 1-1\"><a href=\"# 测试 1-1\" class=\"headerlink\" title=\"测试 1\"></a>测试 1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Person</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +<span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +<span class=\"string\">&quot;, age=&quot;</span> + age +<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 conpareTo 方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Person o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n1=<span class=\"keyword\">this</span>.getName().compareTo(o.getName());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n2=<span class=\"keyword\">this</span>.getAge()-o.getAge();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n1==<span class=\"number\">0</span>?n2:n1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TreeSet&lt;Person&gt; persons=<span class=\"keyword\">new</span> TreeSet&lt;Person&gt;(<span class=\"keyword\">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自定义排序方式</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Person o1, Person o2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n1=o1.getName().compareTo(o2.getName());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n2=o1.getAge()-o2.getAge();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> n1==<span class=\"number\">0</span>?n2:n1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Person p1=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;tang&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">        Person p2=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        Person p3=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;yu&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        persons.add(p1);</span><br><span class=\"line\">        persons.add(p2);</span><br><span class=\"line\">        persons.add(p3);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Person person:persons)&#123;</span><br><span class=\"line\">            System.out.println(person.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/1648b581d6734258b62456be4a4d1c09.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"测试 2-1\"><a href=\"# 测试 2-1\" class=\"headerlink\" title=\"测试 2\"></a>测试 2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 要求：使用 TreeSet 集合实现字符串按照长度进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> * helloworld tangrui hechengyang wangzixu yuguoming</span></span><br><span class=\"line\"><span class=\"comment\"> * Comparator 接口实现定制比较</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tTreeSet&lt;String&gt; treeSet=<span class=\"keyword\">new</span> TreeSet&lt;String&gt;(<span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 先比较字符串长度</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 再比较字符串</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n1=o1.length()-o2.length();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n2=o1.compareTo(o2);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> n1==<span class=\"number\">0</span>?n2:n1;</span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\ttreeSet.add(<span class=\"string\">&quot;helloworld&quot;</span>);</span><br><span class=\"line\">\t\ttreeSet.add(<span class=\"string\">&quot;tangrui&quot;</span>);</span><br><span class=\"line\">\t\ttreeSet.add(<span class=\"string\">&quot;hechenyang&quot;</span>);</span><br><span class=\"line\">\t\ttreeSet.add(<span class=\"string\">&quot;yuguoming&quot;</span>);</span><br><span class=\"line\">\t\ttreeSet.add(<span class=\"string\">&quot;wangzixu&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(treeSet.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/f421fd8398254032b4da0cfa7248fb71.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"Map 接口与实现类\"><a href=\"#Map 接口与实现类\" class=\"headerlink\" title=\"Map 接口与实现类\"></a>Map 接口与实现类 </h1><h2 id=\"Map 接口\"><a href=\"#Map 接口\" class=\"headerlink\" title=\"Map 接口\"></a>Map 接口</h2><p> 特点：</p>\n<ol>\n<li>用于存储任意键值对(Key-Value)。</li>\n<li>键：无序、无下标、不允许重复（唯一）。</li>\n<li>值：无序、无下标、允许重复。</li>\n</ol>\n<p>常见方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">V <span class=\"title\">put</span><span class=\"params\">(K key,V value)</span>   <span class=\"comment\">// 将对象存入到集合中，关联键值。key 重复则覆盖原值。</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">get</span><span class=\"params\">(Object key)</span>   <span class=\"comment\">// 根据键获取相应的值。</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt;     <span class=\"comment\">// 返回所有的 key</span></span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt; <span class=\"title\">values</span><span class=\"params\">()</span>   <span class=\"comment\">// 返回包含所有值的 Collection 集合。</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Map.Entry&lt;K,V&gt;&gt;   <span class=\"comment\">// 键值匹配的 set 集合</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String,Integer&gt; map=<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 添加元素</span></span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;tang&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;fan&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.toString());</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 删除元素</span></span><br><span class=\"line\">\t\tmap.remove(<span class=\"string\">&quot;he&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.toString());</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 遍历</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3.1 使用 keySet();</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(key+<span class=\"string\">&quot; &quot;</span>+map.get(key));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.2 使用 entrySet(); 效率较高</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(entry.getKey()+<span class=\"string\">&quot; &quot;</span>+entry.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/c7ec6256f06040d08cdebd960b694738.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"Map 实现类\"><a href=\"#Map 实现类\" class=\"headerlink\" title=\"Map 实现类\"></a>Map 实现类</h2><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>JDK1.2 版本，线程不安全，运行效率快；允许用 null 作为 key 或是 value</p>\n<h4 id=\"测试 -2\"><a href=\"# 测试 -2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Student 类</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  \t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;\t</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + id + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * HashMap 的使用 </span></span><br><span class=\"line\"><span class=\"comment\">   * 存储结构：哈希表（数组 + 链表 + 红黑树）</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  \t\tHashMap&lt;Student, String&gt; hashMap=<span class=\"keyword\">new</span> HashMap&lt;Student, String&gt;();</span><br><span class=\"line\">  \t\tStudent s1=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;tang&quot;</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\">  \t\tStudent s2=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;yu&quot;</span>, <span class=\"number\">101</span>);</span><br><span class=\"line\">  \t\tStudent s3=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  \t\t<span class=\"comment\">//1. 添加元素</span></span><br><span class=\"line\">  \t\thashMap.put(s1, <span class=\"string\">&quot; 成都 &quot;</span>);</span><br><span class=\"line\">  \t\thashMap.put(s2, <span class=\"string\">&quot; 杭州 &quot;</span>);</span><br><span class=\"line\">  \t\thashMap.put(s3, <span class=\"string\">&quot; 郑州 &quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t\t<span class=\"comment\">// 添加失败，但会更新值</span></span><br><span class=\"line\">  \t\thashMap.put(s3,<span class=\"string\">&quot; 上海 &quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t\t<span class=\"comment\">// 添加成功，不过两个属性一模一样；</span></span><br><span class=\"line\">  \t\t<span class=\"comment\">// 注：假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class=\"line\">  \t\thashMap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">10</span>),<span class=\"string\">&quot; 上海 &quot;</span>);</span><br><span class=\"line\">  \t\tSystem.out.println(hashMap.toString());</span><br><span class=\"line\">  \t\t<span class=\"comment\">//2. 删除元素</span></span><br><span class=\"line\">  \t\thashMap.remove(s3);</span><br><span class=\"line\">  \t\tSystem.out.println(hashMap.toString());</span><br><span class=\"line\">  \t\t<span class=\"comment\">//3. 遍历</span></span><br><span class=\"line\">  \t\t<span class=\"comment\">//3.1 使用 keySet() 遍历 </span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span> (Student key : hashMap.keySet()) &#123;</span><br><span class=\"line\">  \t\t\tSystem.out.println(key+<span class=\"string\">&quot; &quot;</span>+hashMap.get(key));</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">  \t\t<span class=\"comment\">//3.2 使用 entrySet() 遍历</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">for</span> (Map.Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class=\"line\">  \t\t\tSystem.out.println(entry.getKey()+<span class=\"string\">&quot; &quot;</span>+entry.getValue());</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">  \t\t<span class=\"comment\">//4. 判断</span></span><br><span class=\"line\">  \t\t<span class=\"comment\">// 注：同上</span></span><br><span class=\"line\">  \t\tSystem.out.println(hashMap.containsKey(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">10</span>)));</span><br><span class=\"line\">  \t\tSystem.out.println(hashMap.containsValue(<span class=\"string\">&quot; 成都 &quot;</span>));</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/6a0213577b164009a8a73239d85aa337.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>和 HashSet 类似，可以重载 hashCode 和 equals 自定义哈希地址运算和处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">      result = prime * result + id;</span><br><span class=\"line\">      result = prime * result + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      Student other = (Student) obj;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (id != other.id)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name))</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"源码分析 -2\"><a href=\"# 源码分析 -2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析 </h4><p> 内部存储过程可以回看 HashSet 部分，HashSet 内部也是用 map 实现的</p>\n<p>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // 或 16</code></p>\n<p>数组最大容量：<code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></p>\n<p>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></p>\n<p>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></p>\n<p>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></p>\n<p>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></p>\n<p>HashMap 存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code></p>\n<p>HashMap 存储的元素个数：<code>transient int size;</code></p>\n<blockquote>\n<ul>\n<li>默认加载因子是什么？<ul>\n<li>就是判断数组是否扩容的一个因子。假如数组容量为 100，如果 HashMap 的存储元素个数超过了 100*0.75=75，那么就会进行扩容。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的链表长度阈值是什么？<ul>\n<li>假设在数组中下标为 3 的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是 3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；</li>\n</ul>\n</li>\n<li>红黑树调整为链表的链表长度阈值是什么？<ul>\n<li>当红黑树的元素个数小于该阈值时就会转换成链表。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的数组最小阈值是什么？<ul>\n<li>并不是只要链表长度大于 8 就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于 64 才会进行转换。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>HashMap 的数组 table 存储的就是一个个的<u>Node&lt;K,V&gt; 类型</u>，很清晰地看到有一对键值，还有一个指向 next 的指针:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">      V value;</span><br><span class=\"line\">      Node&lt;K,V&gt; next;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>刚创建 HashMap 时默认大小为 0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>往 HashMap 中添加元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 判断 table 是否为空 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">          n = (tab = resize()).length;  <span class=\"comment\">//resize() 用于重新设置大小</span></span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 判断根据 hashcode 的到的 tab 中的一个位置是否为空，为空便直接添加元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//......</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldThr = threshold;   <span class=\"comment\">//threshold 为阈值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">/*......*/</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">/*......*/</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">          newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">          newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">      Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">      table = newTab;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>刚创建 HashMap 时，threshold=0，进入第三个 if 分支，newCap 的值初始化为默认的 16。<br>接下来创建了一个 newCap 大小的数组并将其赋给了 table，刚创建的 HashMap 对象就在这里获得了初始容量。<br>回到 putVal 方法执行第二个 if。<br>当添加的元素超过 16*0.75=12 时，就会进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,<span class=\"keyword\">boolean</span> evict)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">      <span class=\"comment\">//......</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> newCap;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class=\"comment\">/* 略 */</span>&#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)&#123;</span><br><span class=\"line\">              newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//......</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashSet 源码中的 HashMap\"><a href=\"#HashSet 源码中的 HashMap\" class=\"headerlink\" title=\"HashSet 源码中的 HashMap\"></a>HashSet 源码中的 HashMap</h4><p>HashSet 的存储结构就是 HashMap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashSet</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">      <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">      <span class=\"keyword\">implements</span> <span class=\"title\">Set</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> map.put(e, PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可见，HashSet 中的 add 方法调用的就是 map 的 put 方法，把元素作为 map 的 key 传入。</p>\n<h4 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h4><ul>\n<li><p>JDK1.0 版本，线程安全，运行效率慢；不允许 null 作为 key 或是 value。</p>\n</li>\n<li><p>初始容量 11，加载因子 0.75。</p>\n<p>这个集合在开发过程中已经不用了，稍微了解即可。</p>\n</li>\n</ul>\n<h4 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h4><p>Hashtable 的子类，要求 key 和 value 都是 String。通常用于配置文件的读取。它继承了 Hashtable 的方法，与流关系密切，此处不详解。</p>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><h4 id=\"测试 -3\"><a href=\"# 测试 -3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Student 类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Student</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + id + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n1 = <span class=\"keyword\">this</span>.id - o.id;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TreeMap&lt;Student, Integer&gt; treeMap=<span class=\"keyword\">new</span> TreeMap&lt;Student, Integer&gt;();</span><br><span class=\"line\">        Student s1=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;tang&quot;</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\">        Student s2=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;yu&quot;</span>, <span class=\"number\">101</span>);</span><br><span class=\"line\">        Student s3=<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1. 添加元素</span></span><br><span class=\"line\">        treeMap.put(s1, <span class=\"number\">21</span>);</span><br><span class=\"line\">        treeMap.put(s2, <span class=\"number\">22</span>);</span><br><span class=\"line\">        treeMap.put(s3, <span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 不能直接打印，需要实现 Comparable 接口，因为红黑树需要比较大小</span></span><br><span class=\"line\">        System.out.println(treeMap.toString());</span><br><span class=\"line\">        <span class=\"comment\">//2. 删除元素</span></span><br><span class=\"line\">        treeMap.remove(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;he&quot;</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">        System.out.println(treeMap.toString());</span><br><span class=\"line\">        <span class=\"comment\">//3. 遍历</span></span><br><span class=\"line\">        <span class=\"comment\">//3.1 使用 keySet()</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Student key : treeMap.keySet()) &#123;</span><br><span class=\"line\">            System.out.println(key+<span class=\"string\">&quot; &quot;</span>+treeMap.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.2 使用 entrySet()</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(entry.getKey()+<span class=\"string\">&quot; &quot;</span>+entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//4. 判断</span></span><br><span class=\"line\">        System.out.println(treeMap.containsKey(s1));</span><br><span class=\"line\">        System.out.println(treeMap.isEmpty());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/551bfa5110ee4dad9cd52b54b0d7c8d6.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"TreeSet 中的 TreeMap\"><a href=\"#TreeSet 中的 TreeMap\" class=\"headerlink\" title=\"TreeSet 中的 TreeMap\"></a>TreeSet 中的 TreeMap</h4><p>类比 HashSet 和 HasMap。TreeSet 和 TreeMap 的关系也类似。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeSet</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">NavigableSet</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.put(e, PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Collections 工具类\"><a href=\"#Collections 工具类\" class=\"headerlink\" title=\"Collections 工具类\"></a>Collections 工具类 </h1><p> 内部集成了一些常用的静态方法。可以回想 Arrays 类的用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(List&lt;?&gt; list)</span><span class=\"comment\">// 反转集合中元素的顺序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(List&lt;?&gt; list)</span><span class=\"comment\">// 随机重置集合元素的顺序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List&lt;T&gt; list)</span><span class=\"comment\">// 升序排序（元素类型必须实现 Comparable 接口）</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"测试 -4\"><a href=\"# 测试 -4\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 Collections 工具类的使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">30</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">90</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">70</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//sort 排序</span></span><br><span class=\"line\">\t\tSystem.out.println(list.toString());</span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list.toString());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;---------&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//binarySearch 二分查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i=Collections.binarySearch(list, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//copy 复制</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; list2=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i1=<span class=\"number\">0</span>;i1&lt;<span class=\"number\">5</span>;++i1) &#123;</span><br><span class=\"line\">\t\t\tlist2.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 该方法要求目标元素容量大于等于源目标</span></span><br><span class=\"line\">\t\tCollections.copy(list2, list);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//reserve 反转</span></span><br><span class=\"line\">\t\tCollections.reverse(list2);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//shuffle 打乱</span></span><br><span class=\"line\">\t\tCollections.shuffle(list2);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 补充：list 转成数组</span></span><br><span class=\"line\">\t\tInteger[] arr=list.toArray(<span class=\"keyword\">new</span> Integer[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tSystem.out.println(arr.length);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 补充：数组转成集合 </span></span><br><span class=\"line\">\t\tString[] nameStrings= &#123;<span class=\"string\">&quot;tang&quot;</span>,<span class=\"string\">&quot;he&quot;</span>,<span class=\"string\">&quot;yu&quot;</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 受限集合，不能添加和删除</span></span><br><span class=\"line\">\t\tList&lt;String&gt; list3=Arrays.asList(nameStrings);</span><br><span class=\"line\">\t\tSystem.out.println(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 注：基本类型转成集合时需要修改为包装类</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.put(e, PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Collections 工具类 -1\"><a href=\"#Collections 工具类 -1\" class=\"headerlink\" title=\"Collections 工具类\"></a>Collections 工具类 </h1><p> 内部集成了一些常用的静态方法。可以回想 Arrays 类的用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(List&lt;?&gt; list)</span><span class=\"comment\">// 反转集合中元素的顺序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(List&lt;?&gt; list)</span><span class=\"comment\">// 随机重置集合元素的顺序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List&lt;T&gt; list)</span><span class=\"comment\">// 升序排序（元素类型必须实现 Comparable 接口）</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"测试 -5\"><a href=\"# 测试 -5\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示 Collections 工具类的使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">30</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">90</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">70</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//sort 排序</span></span><br><span class=\"line\">\t\tSystem.out.println(list.toString());</span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list.toString());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;---------&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//binarySearch 二分查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i=Collections.binarySearch(list, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//copy 复制</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; list2=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i1=<span class=\"number\">0</span>;i1&lt;<span class=\"number\">5</span>;++i1) &#123;</span><br><span class=\"line\">\t\t\tlist2.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 该方法要求目标元素容量大于等于源目标</span></span><br><span class=\"line\">\t\tCollections.copy(list2, list);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//reserve 反转</span></span><br><span class=\"line\">\t\tCollections.reverse(list2);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//shuffle 打乱</span></span><br><span class=\"line\">\t\tCollections.shuffle(list2);</span><br><span class=\"line\">\t\tSystem.out.println(list2.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 补充：list 转成数组</span></span><br><span class=\"line\">\t\tInteger[] arr=list.toArray(<span class=\"keyword\">new</span> Integer[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tSystem.out.println(arr.length);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 补充：数组转成集合 </span></span><br><span class=\"line\">\t\tString[] nameStrings= &#123;<span class=\"string\">&quot;tang&quot;</span>,<span class=\"string\">&quot;he&quot;</span>,<span class=\"string\">&quot;yu&quot;</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 受限集合，不能添加和删除</span></span><br><span class=\"line\">\t\tList&lt;String&gt; list3=Arrays.asList(nameStrings);</span><br><span class=\"line\">\t\tSystem.out.println(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 注：基本类型转成集合时需要修改为包装类</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/5e53edcafa2e4ca2b8882ebc759ea0f1.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n","url":"/posts/40254/","min2read":35,"word4post":"7.3k","prev_post":{"title":"Java IO 框架","url":"/posts/21012/"},"next_post":{"title":"java 基本语法 (三)：面向对象、异常","url":"/posts/20645/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Java 集合框架\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Java 集合框架 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"集合概述\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">集合概述 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Colleection 接口\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">Colleection 接口 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"测试 1\" href = \"#\"><span class=\"toc-number\">3.0.1.</span> <span class=\"toc-text\">测试 1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"测试 2\" href = \"#\"><span class=\"toc-number\">3.0.2.</span> <span class=\"toc-text\">测试 2</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"List 接口与实现类\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">List 接口与实现类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"List 接口\" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\">List 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"测试\" href = \"#\"><span class=\"toc-number\">4.1.1.</span> <span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"2-2-List 实现类\" href = \"#\"><span class=\"toc-number\">4.2.</span> <span class=\"toc-text\">2.2 List 实现类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"2-2-1-ArrayList\" href = \"#\"><span class=\"toc-number\">4.2.1.</span> <span class=\"toc-text\">2.2.1 ArrayList</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"ArrayList 测试\" href = \"#\"><span class=\"toc-number\">4.2.1.1.</span> <span class=\"toc-text\">ArrayList 测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"源码分析\" href = \"#\"><span class=\"toc-number\">4.2.1.2.</span> <span class=\"toc-text\">源码分析 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"2-2-2-Vector\" href = \"#\"><span class=\"toc-number\">4.2.2.</span> <span class=\"toc-text\">2.2.2 Vector</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"2-2-3-LinkedList\" href = \"#\"><span class=\"toc-number\">4.2.3.</span> <span class=\"toc-text\">2.2.3 LinkedList</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"LinkedList 测试\" href = \"#\"><span class=\"toc-number\">4.2.3.1.</span> <span class=\"toc-text\">LinkedList 测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"源码分析 -1\" href = \"#\"><span class=\"toc-number\">4.2.3.2.</span> <span class=\"toc-text\">源码分析</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"泛型和工具类\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">泛型和工具类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"泛型概述\" href = \"#\"><span class=\"toc-number\">5.1.</span> <span class=\"toc-text\"> 泛型概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"泛型类\" href = \"#\"><span class=\"toc-number\">5.2.</span> <span class=\"toc-text\">泛型类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"泛型接口\" href = \"#\"><span class=\"toc-number\">5.3.</span> <span class=\"toc-text\">泛型接口 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"实现接口时确定泛型类\" href = \"#\"><span class=\"toc-number\">5.3.1.</span> <span class=\"toc-text\"> 实现接口时确定泛型类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"实现接口时不确定泛型类\" href = \"#\"><span class=\"toc-number\">5.3.2.</span> <span class=\"toc-text\">实现接口时不确定泛型类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"泛型方法\" href = \"#\"><span class=\"toc-number\">5.4.</span> <span class=\"toc-text\">泛型方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"泛型集合\" href = \"#\"><span class=\"toc-number\">5.5.</span> <span class=\"toc-text\">泛型集合 </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Set 接口与实现类\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\">Set 接口与实现类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Set 接口\" href = \"#\"><span class=\"toc-number\">6.1.</span> <span class=\"toc-text\">Set 接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Set 实现类\" href = \"#\"><span class=\"toc-number\">6.2.</span> <span class=\"toc-text\">Set 实现类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"HashSet\" href = \"#\"><span class=\"toc-number\">6.2.1.</span> <span class=\"toc-text\">HashSet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 -1\" href = \"#\"><span class=\"toc-number\">6.2.1.1.</span> <span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"内部哈希表存储过程\" href = \"#\"><span class=\"toc-number\">6.2.1.2.</span> <span class=\"toc-text\">内部哈希表存储过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"TreeSet\" href = \"#\"><span class=\"toc-number\">6.2.2.</span> <span class=\"toc-text\">TreeSet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 1-1\" href = \"#\"><span class=\"toc-number\">6.2.2.1.</span> <span class=\"toc-text\">测试 1</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"测试 2-1\" href = \"#\"><span class=\"toc-number\">6.2.3.</span> <span class=\"toc-text\">测试 2</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Map 接口与实现类\" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\">Map 接口与实现类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Map 接口\" href = \"#\"><span class=\"toc-number\">7.1.</span> <span class=\"toc-text\">Map 接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Map 实现类\" href = \"#\"><span class=\"toc-number\">7.2.</span> <span class=\"toc-text\">Map 实现类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"HashMap\" href = \"#\"><span class=\"toc-number\">7.2.1.</span> <span class=\"toc-text\">HashMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 -2\" href = \"#\"><span class=\"toc-number\">7.2.1.1.</span> <span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"源码分析 -2\" href = \"#\"><span class=\"toc-number\">7.2.1.2.</span> <span class=\"toc-text\">源码分析 </span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"HashSet 源码中的 HashMap\" href = \"#\"><span class=\"toc-number\">7.2.1.3.</span> <span class=\"toc-text\">HashSet 源码中的 HashMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"Hashtable\" href = \"#\"><span class=\"toc-number\">7.2.1.4.</span> <span class=\"toc-text\">Hashtable</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"Properties\" href = \"#\"><span class=\"toc-number\">7.2.1.5.</span> <span class=\"toc-text\">Properties</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"TreeMap\" href = \"#\"><span class=\"toc-number\">7.2.2.</span> <span class=\"toc-text\">TreeMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 -3\" href = \"#\"><span class=\"toc-number\">7.2.2.1.</span> <span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"TreeSet 中的 TreeMap\" href = \"#\"><span class=\"toc-number\">7.2.2.2.</span> <span class=\"toc-text\">TreeSet 中的 TreeMap</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Collections 工具类\" href = \"#\"><span class=\"toc-number\">8.</span> <span class=\"toc-text\">Collections 工具类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 -4\" href = \"#\"><span class=\"toc-number\">8.0.0.1.</span> <span class=\"toc-text\">测试</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Collections 工具类 -1\" href = \"#\"><span class=\"toc-number\">9.</span> <span class=\"toc-text\">Collections 工具类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"测试 -5\" href = \"#\"><span class=\"toc-number\">9.0.0.1.</span> <span class=\"toc-text\">测试</span></a></li></ol></li></ol></li></ol></li></ol>","categories":[],"tags":[{"name":"JavaSE","path":"api/tags/JavaSE.json","url":"/tags/JavaSE/"}]}