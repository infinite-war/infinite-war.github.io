{"title":"Java 注解与反射","slug":"Java注解与反射","date":"2022-01-18","updated":"2022-01-31","comments":true,"path":"api/posts/12475.json","excerpt":null,"cover":"https://img-blog.csdnimg.cn/8a47cfc938d943f2bf7bc81d16861596.png?x-oss-process=image","covers":["https://img-blog.csdnimg.cn/8a47cfc938d943f2bf7bc81d16861596.png?x-oss-process=image","https://img-blog.csdnimg.cn/58684b7a7e6e44269d13fac0e570b6b5.png?x-oss-process=image","https://img-blog.csdnimg.cn/4de51408c853445ba43e4486238d440b.png?x-oss-process=image","https://img-blog.csdnimg.cn/dd5c6ae6ab8c4f09a37d01299e7ab1ed.png#pic_center","https://img-blog.csdnimg.cn/9b6dd1852e514318b58687c2d6d314b5.png?x-oss-process=image","https://img-blog.csdnimg.cn/ba1646a261b844a09ce13c497a378e74.png?x-oss-process=image","https://img-blog.csdnimg.cn/371061ec95a24d3f96b8c303ad9b6155.png?x-oss-process=image","https://img-blog.csdnimg.cn/b41ae46dd6e4489eb19921e5caf8867a.png?x-oss-process=image","https://img-blog.csdnimg.cn/f8403ef4691148578f9104673f3f2ec7.png?x-oss-process=image","https://img-blog.csdnimg.cn/b4d5924fe45f4596bc0bd076d46f9750.png#pic_center","https://img-blog.csdnimg.cn/221b11e6f86d4110a874382c985647bd.png?x-oss-process=image","https://img-blog.csdnimg.cn/c9a4f9d71d6a48a0832d533f4f8e2407.png#pic_center","https://img-blog.csdnimg.cn/20ab79d3730248e0846f9811fae409ae.png#pic_center","https://img-blog.csdnimg.cn/38788cf4571a4e49a44f42b595065cbb.png?x-oss-process=image","https://img-blog.csdnimg.cn/e87cb12060954b2fb475946f01d1ac67.png?x-oss-process=image","https://img-blog.csdnimg.cn/5b370747c78c483390fdbe975d1b4f9d.png?x-oss-process=image","https://img-blog.csdnimg.cn/dbce163c07a24f64844dd39f65a4db39.png?x-oss-process=image","https://img-blog.csdnimg.cn/089b72ee00364e028fbc3f479774be5e.png?x-oss-process=image","https://img-blog.csdnimg.cn/876d7585c7b14555ac07ab0846fe1748.png?x-oss-process=image","https://img-blog.csdnimg.cn/80a5eb892be94e51bf91aed1c57e8917.png?x-oss-process=image","https://img-blog.csdnimg.cn/28aae089b10e4ae3bb15eae52d5ecba0.png?x-oss-process=image"],"content":"<h1 id=\"Java 注解与反射\"><a href=\"#Java 注解与反射\" class=\"headerlink\" title=\"Java 注解与反射\"></a>Java 注解与反射 </h1><p> 参考视频：BV1p4411P7V3</p>\n<p>CSDN:<a href=\"https://blog.csdn.net/INFINITE_WAR/article/details/122568162\">https://blog.csdn.net/INFINITE_WAR/article/details/122568162</a></p>\n<h1 id=\"注解\"><a href=\"# 注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><p><code>Java.Annotation</code>。与注释不同，注解不仅可以给人看，还可以用于程序运行。</p>\n<p>Annotation 可以附加在 package、class、method、field 等之上，用于添加额外的辅助信息，可以通过 <u> 反射 </u> 机制编程实现对这些元数据的访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@注解名</span><br><span class=\"line\"><span class=\"comment\">// 代码......</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见内置注解\"><a href=\"# 常见内置注解\" class=\"headerlink\" title=\"常见内置注解\"></a>常见内置注解</h2><ul>\n<li><code>@Override</code>: 定义载 <code>java.lang.Override</code> 中，此注解只适用于修辞方法，表示一个方法声明打算重载超类中的另一个方法声明。</li>\n<li><code>@Deprecated</code>: 定义在 <code>java.lang.Deprecated</code> 中，表示不鼓励程序员使用这样的元素。</li>\n<li><code>@SuppressWarnings</code>: 定义在 <code>java.lang.SuppressWarnings</code> 中，用来抑制编译时的警告信息。需要添加参数，如 <code>@SuppressWarnings(&quot;all&quot;)</code>，<code>@SuppressWarnings(&quot;unchecked&quot;)</code> ，<code>@SuppressWarnings(value=&#123;&quot;unchecked&quot;,&quot;deprecation&#125;)</code> 等</li>\n</ul>\n<h2 id=\"元注解\"><a href=\"# 元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解 </h2><p> 目的：用于注解其他注解</p>\n<p><code>java.lang.annotation</code></p>\n<ul>\n<li><code>@Target</code>: 用于描述注解的适用范围(即：被描述的注解可以用在什么地方)</li>\n<li><code>@Retention</code>: 表示需要载什么级别保存该注释信息，用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)</li>\n<li><code>@Document</code>: 说明该注解将被包含在 javadoc 中</li>\n<li><code>@inherited</code>: 说明子类可以继承父类中的该注解</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/8a47cfc938d943f2bf7bc81d16861596.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/58684b7a7e6e44269d13fac0e570b6b5.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(value=&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span>  <span class=\"comment\">// 表示可以用在方法或类上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(value= RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span> <span class=\"comment\">// 子类可以继承父类的注解</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义注解\"><a href=\"# 自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解 </h2><p> 使用 <code>@interface</code> 自定义注解时，自动继承了 <code>java.lang.annotation.Annotation</code> 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation(name=&quot;class&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation2(&quot;aaaa&quot;)</span>  <span class=\"comment\">// 不写复制对象时，默认对 value 赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(value=&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span>  <span class=\"comment\">// 表示可以用在方法或类上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(value= RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span> <span class=\"comment\">// 子类可以继承父类的注解</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注解的参数：参数类型 + 参数名()</span></span><br><span class=\"line\">    <span class=\"comment\">//default 用来设置默认值，若不设置，则必须在写注解时显式赋值</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">age</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> -1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] schools() <span class=\"keyword\">default</span> &#123;<span class=\"string\">&quot;xx 大学 &quot;</span>,<span class=\"string\">&quot;yy 大学 &quot;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(value=&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span>  <span class=\"comment\">// 表示可以用在方法或类上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(value= RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation2&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"反射\"><a href=\"# 反射\" class=\"headerlink\" title=\"反射\"></a>反射 </h1><h2 id=\"概述\"><a href=\"# 概述\" class=\"headerlink\" title=\"概述\"></a> 概述</h2><p><code>java.Reflection</code></p>\n<p>动态语言：C#，python，javascript 等。运行时可以根据条件改变结构</p>\n<p>静态语言：C，C++，java 等。运行时结构不变</p>\n<p>反射使 java 拥有了动态的特性，如运行时创建类</p>\n<p>反射机制允许程序在执行时借助 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c=Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象(一个类只有哟个 Class 对象)，这个对象就包含了完成的类的结构信息。我们可以通过这个对象看到类的结构。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4de51408c853445ba43e4486238d440b.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>优点：灵活性更高</p>\n<p>缺点：对性能有影响</p>\n<h2 id=\"Class 类\"><a href=\"#Class 类\" class=\"headerlink\" title=\"Class 类\"></a>Class 类</h2><ul>\n<li>Class 对象只能由系统建立</li>\n<li>一个加载的类在 JVM 中只会由一个 Class 实例</li>\n<li>一个 Class 对象对应的时一个加载到 JVM 中的一个.class 文件</li>\n<li>每个类的实例都会记得自己是由哪个 Class 实例所生成的</li>\n<li>通过 Class 可以完整地得到一个类中的所有被加载的结构</li>\n<li>Class 类是 Reflection 的根源，针对任何想要动态加载、允许的类，必须先获得相应的 Class 对象</li>\n</ul>\n<p>常用方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static ClassforName(String name)</td>\n<td>范围指定类名 name 的 Class 对象</td>\n</tr>\n<tr>\n<td>Object newInstance()</td>\n<td>调用缺省构造函数，返回 Class 对象的一个实例</td>\n</tr>\n<tr>\n<td>getName()</td>\n<td>返回此 Class 对象所表示的实体 (类、接口、数组类或 void) 的名称</td>\n</tr>\n<tr>\n<td>Class getSuperClass()</td>\n<td>返回当前 Class 对象的父类的 Class 对象</td>\n</tr>\n<tr>\n<td>Class[] getinterfaces()</td>\n<td>获取当前 Class 对象的接口</td>\n</tr>\n<tr>\n<td>ClassLoader getClassLoader()</td>\n<td>返回该类的类加载器</td>\n</tr>\n<tr>\n<td>Constructor[] getConstructors()</td>\n<td>返回一个包含某些 Constructor 对象的数组</td>\n</tr>\n<tr>\n<td>Method getMethod(String name,Class.. T)</td>\n<td>返回一个 Method 对象，此最想的形参类型为 param Type</td>\n</tr>\n<tr>\n<td>Field[] getDeclaredFields()</td>\n<td>返回 Fields 对象的一个数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取 Class 对象\"><a href=\"# 获取 Class 对象\" class=\"headerlink\" title=\"获取 Class 对象\"></a>获取 Class 对象 </h3><p> 以下类型拥有 Class 对象 (即可以使用  <code> 类名称.class</code> 获取 Class 对象)：</p>\n<ul>\n<li>类：外部类，成员类，局部内部类，匿名内部类</li>\n<li>interface：接口</li>\n<li>[]：数组</li>\n<li>enum：枚举</li>\n<li>annotation：注解 @interface</li>\n<li>primitive type：基本数据类型</li>\n<li>void</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        Person person=<span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 这个人是：&quot;</span>+person.type);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法一：通过对象获得</span></span><br><span class=\"line\">        Class c1=person.getClass();</span><br><span class=\"line\">        System.out.println(c1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法二：forname 获得</span></span><br><span class=\"line\">        Class c2=Class.forName(<span class=\"string\">&quot;Test.Student&quot;</span>);</span><br><span class=\"line\">        System.out.println(c2.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法三：通过类名.class 获得</span></span><br><span class=\"line\">        Class c3=Student.class;</span><br><span class=\"line\">        System.out.println(c3.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法四：基本内置类型的包装类都有一个 Type 属性</span></span><br><span class=\"line\">        Class c4=Integer.TYPE;</span><br><span class=\"line\">        System.out.println(c4);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获得父类类型</span></span><br><span class=\"line\">        Class c5 = c1.getSuperclass();</span><br><span class=\"line\">        System.out.println(c5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type=<span class=\"string\">&quot; 学生 &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Teacher</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type=<span class=\"string\">&quot; 老师 &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/dd5c6ae6ab8c4f09a37d01299e7ab1ed.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 通过反射获取类的 Class 对象</span></span><br><span class=\"line\">        Class c1=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\">        System.out.println(c1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Class c2=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\">        Class c3=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\">        Class c4=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 一个类在内存中只有一个 Class 对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 一个类加载后，类的整个结构都会被封装在 Class 对象中</span></span><br><span class=\"line\">        System.out.println(c2.hashCode());</span><br><span class=\"line\">        System.out.println(c3.hashCode());</span><br><span class=\"line\">        System.out.println(c4.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实体类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//constructor</span></span><br><span class=\"line\">\t<span class=\"comment\">//getter()+setter()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/9b6dd1852e514318b58687c2d6d314b5.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"Java 内存分析\"><a href=\"#Java 内存分析\" class=\"headerlink\" title=\"Java 内存分析\"></a>Java 内存分析</h2><p><img src=\"https://img-blog.csdnimg.cn/ba1646a261b844a09ce13c497a378e74.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"类加载过程\"><a href=\"# 类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h3><p><img src=\"https://img-blog.csdnimg.cn/371061ec95a24d3f96b8c303ad9b6155.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>加载：将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的 java.lang.Class 对象。</p>\n<p>链接：将 Java 类的二进制代码合并到 JVM 的运行状态之中的过程</p>\n<ul>\n<li>验证：确保加载的类信息符合 JVM 规范，没有安全方面的问题。</li>\n<li>准备：正式为类变量 (static) 分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li>\n<li>解析：JVM 常量池内的符号引用 (常量名) 替换为直接引用 (地址) 的过程。</li>\n</ul>\n<p>初始化(JVM 自动完成)：</p>\n<ul>\n<li>执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。该方法是由编译时自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。(构造的是类而不是对象)</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>JVM 会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确加锁和同步。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        A a=<span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        System.out.println(A.m);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1. 加载到内存，会产生一个类对应的 Class 对象</span></span><br><span class=\"line\"><span class=\"comment\">        2. 链接，链接结束后 m=0</span></span><br><span class=\"line\"><span class=\"comment\">        3. 初始化</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;clinit&gt;()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                System.out.println(“A 类静态代码块初始化”);</span></span><br><span class=\"line\"><span class=\"comment\">                m=300;</span></span><br><span class=\"line\"><span class=\"comment\">                m=100;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            m 最终赋值为 100</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A 类静态代码块初始化 &quot;</span>);</span><br><span class=\"line\">        m=<span class=\"number\">300</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">A</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A 类的无参构造初始化 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/b41ae46dd6e4489eb19921e5caf8867a.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8403ef4691148578f9104673f3f2ec7.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"类的初始化\"><a href=\"# 类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化 </h3><p> 类的主动引用(一定会发生类的初始化)：</p>\n<ul>\n<li>JVM 启动时，先初始化 main 方法所在的类</li>\n<li>new 一个类的对象</li>\n<li>调用类的静态成员 (除了 final 常量) 个静态方法</li>\n<li>使用 java.lang.reflect 包的方法对类进行反射调用</li>\n<li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Main 类被加载 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 主动引用</span></span><br><span class=\"line\">        <span class=\"comment\">//Son son=new Son();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 通过反射产生主动调用</span></span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;Test.Son&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 父类被加载 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 子类被加载 &quot;</span>);</span><br><span class=\"line\">        m=<span class=\"number\">300</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> M=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/b4d5924fe45f4596bc0bd076d46f9750.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>类的被动引用(不会发生类的初始化)：</p>\n<ul>\n<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li>\n<li>通过数组定义类引用，不会触发此类的初始化</li>\n<li>引用常量不会触发此类的初始化(常量在链接阶段就存入调用类的常量池中了)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Main 类被加载 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不会产生类的引用的方法</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 调用类内静态变量</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Son.b);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 声明类的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//Son[] son=new Son[5];</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3. 调用类内静态常量</span></span><br><span class=\"line\">        System.out.println(Son.M);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Father、Son 类定义</span></span><br></pre></td></tr></table></figure>\n\n<p>调用类内静态变量</p>\n<p><img src=\"https://img-blog.csdnimg.cn/221b11e6f86d4110a874382c985647bd.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>声明类的数组</p>\n<p><img src=\"https://img-blog.csdnimg.cn/c9a4f9d71d6a48a0832d533f4f8e2407.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>调用类内静态常量</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20ab79d3730248e0846f9811fae409ae.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"类加载器\"><a href=\"# 类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器 </h3><p> 类加载的作用：将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法去的运行时数据结构，然后再队中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区中数据的访问入口。</p>\n<p>类缓存：标准的 JavaEE 类加载器中可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载 (缓存) 一段时间，不过 JVM 垃圾回收机制可以回收这些 Class 对象。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/38788cf4571a4e49a44f42b595065cbb.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/e87cb12060954b2fb475946f01d1ac67.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取系统类的加载器</span></span><br><span class=\"line\">        ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">        System.out.println(systemClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取系统类加载器的父类加载器：扩展类加载器</span></span><br><span class=\"line\">        ClassLoader parent=systemClassLoader.getParent();</span><br><span class=\"line\">        System.out.println(parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取扩展类加载器的父类加载器：根加载器</span></span><br><span class=\"line\">        ClassLoader parent1=parent.getParent();</span><br><span class=\"line\">        System.out.println(parent1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试当前类是哪个加载器加载的</span></span><br><span class=\"line\">        ClassLoader classLoader=Class.forName(<span class=\"string\">&quot;Test.Test&quot;</span>).getClassLoader();</span><br><span class=\"line\">        System.out.println(classLoader);</span><br><span class=\"line\">        <span class=\"comment\">// 测试 JDK 内置的类是谁加载的</span></span><br><span class=\"line\">        classLoader=Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class=\"line\">        System.out.println(classLoader);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如何获得系统类加载器可以加载的所有路径</span></span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/5b370747c78c483390fdbe975d1b4f9d.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p>双亲委派机制：加入写了一个跟已有包重名的包(如自己写了 java.lang.String)，系统会自动选择原有的 java.lang.String 包，保证安全性。</p>\n<h2 id=\"获取类的运行时结构\"><a href=\"# 获取类的运行时结构\" class=\"headerlink\" title=\"获取类的运行时结构\"></a>获取类的运行时结构 </h2><p> 通过反射获取运行时类的完整结构：Field、Method、Constructor、Superclass、Interface、Annotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        Class c1=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得类的名字 </span></span><br><span class=\"line\">        System.out.println(c1.getName());  <span class=\"comment\">// 获得包名 + 类名</span></span><br><span class=\"line\">        System.out.println(c1.getSimpleName()); <span class=\"comment\">// 获得类名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得类的属性</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=================================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//c1.getFields() 只能获取 public 属性</span></span><br><span class=\"line\">        Field[] fields=c1.getDeclaredFields(); <span class=\"comment\">// 获取所有类型的属性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field field:fields)&#123;</span><br><span class=\"line\">            System.out.println(field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得指定属性的值</span></span><br><span class=\"line\">        Field name=c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得类的方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============================================&quot;</span>);</span><br><span class=\"line\">        Method[] methods=c1.getMethods(); <span class=\"comment\">// 获取当前类及其超类的所有方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Method method:methods)&#123;</span><br><span class=\"line\">            System.out.println(method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        methods=c1.getDeclaredMethods(); <span class=\"comment\">// 获取当前类的所有方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Method method:methods)&#123;</span><br><span class=\"line\">            System.out.println(method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得特定方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 重载</span></span><br><span class=\"line\">        Method getName=c1.getMethod(<span class=\"string\">&quot;getName&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Method setName=c1.getMethod(<span class=\"string\">&quot;setName&quot;</span>,String.class);</span><br><span class=\"line\">        System.out.println(getName);</span><br><span class=\"line\">        System.out.println(setName);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得构造器</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================================&quot;</span>);</span><br><span class=\"line\">        Constructor[] constructors=c1.getConstructors(); <span class=\"comment\">// 只能获得 public 方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor constructor:constructors)&#123;</span><br><span class=\"line\">            System.out.println(constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        constructors=c1.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor constructor:constructors)&#123;</span><br><span class=\"line\">            System.out.println(constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获得指定构造器</span></span><br><span class=\"line\">        Constructor declaredConstructor=c1.getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">        System.out.println(declaredConstructor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/dbce163c07a24f64844dd39f65a4db39.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"动态创建对象\"><a href=\"# 动态创建对象\" class=\"headerlink\" title=\"动态创建对象\"></a>动态创建对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取 Class 对象</span></span><br><span class=\"line\">        Class c1=Class.forName(<span class=\"string\">&quot;Test.User&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过反射构造一个对象</span></span><br><span class=\"line\">        User user=(User) c1.newInstance();  <span class=\"comment\">// 本质是调用无参构造。若类里没有实现无参构造，就会报错</span></span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n================================\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 通过构造器创建对象</span></span><br><span class=\"line\">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class=\"keyword\">int</span>.class, <span class=\"keyword\">int</span>.class);<span class=\"comment\">// 指定构造器</span></span><br><span class=\"line\">        User user2=(User)constructor.newInstance(<span class=\"string\">&quot; 张三 &quot;</span>,<span class=\"number\">001</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(user2.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n================================\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射调用普通方法</span></span><br><span class=\"line\">        User user3=(User)c1.newInstance();</span><br><span class=\"line\">        Method setName=c1.getDeclaredMethod(<span class=\"string\">&quot;setName&quot;</span>,String.class);</span><br><span class=\"line\">        <span class=\"comment\">//invoke 为激活方法</span></span><br><span class=\"line\">        setName.invoke(user3,<span class=\"string\">&quot; 李四 &quot;</span>);</span><br><span class=\"line\">        System.out.println(user3.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n================================\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射操作属性</span></span><br><span class=\"line\">        User user4=(User)c1.newInstance();</span><br><span class=\"line\">        Field name=c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//User 中的 name 是 private 类型，通过下面方法设置为可以直接访问</span></span><br><span class=\"line\">        name.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        name.set(user4,<span class=\"string\">&quot; 王五 &quot;</span>);</span><br><span class=\"line\">        System.out.println(user4.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/089b72ee00364e028fbc3f479774be5e.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<p><code>Object invoke(Object obj,Object ... args)</code></p>\n<ul>\n<li>Object 对应原方法的返回值，若原方法无返回值，此时返回 null</li>\n<li>若原方法为静态方法，此时形参 Object obj 可以为 null</li>\n<li>若原方法形参列表为空，则 Object[] args 为 null</li>\n<li>若原方法声明为 private，则需要再使用 invoke 前，显示调用方法对象的 <code>setAccessible(true)</code> 方法，将可以访问 private 方法(属性同理)</li>\n</ul>\n<p><code>setAccessible</code>(boolean x)</p>\n<ul>\n<li>Method、Field、Constructor 对象都有 setAccessible()方法</li>\n<li>setAccessible 作用是启动和禁用访问安全检查的开关。默认为 false，说明反射的对象应该实施 Java 语言访问检查。true 代表反射的对象在使用时应该取消 Java 语言访问检查</li>\n</ul>\n<h3 id=\"性能分析\"><a href=\"# 性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析 </h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 普通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user=<span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime=System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000000</span>;i++)&#123;</span><br><span class=\"line\">            user.getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime=System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 普通方式执行 10 亿次：&quot;</span>+(endTime-startTime)+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 反射方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        User user=<span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        Class c1=user.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        Method getName=c1.getDeclaredMethod(<span class=\"string\">&quot;getName&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime=System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000000</span>;i++)&#123;</span><br><span class=\"line\">            getName.invoke(user,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime=System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 反射方式执行 10 亿次：&quot;</span>+(endTime-startTime)+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 反射方式  关闭访问权限检测</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        User user=<span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        Class c1=user.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        Method getName=c1.getDeclaredMethod(<span class=\"string\">&quot;getName&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        getName.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime=System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000000</span>;i++)&#123;</span><br><span class=\"line\">            getName.invoke(user,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime=System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 反射方式(关闭检测) 执行 10 亿次：&quot;</span>+(endTime-startTime)+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">        test2();</span><br><span class=\"line\">        test3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/876d7585c7b14555ac07ab0846fe1748.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"获取泛型信息\"><a href=\"# 获取泛型信息\" class=\"headerlink\" title=\"获取泛型信息\"></a>获取泛型信息</h2><p>Java 采用泛型擦除的机制来引入泛型，Java 中的泛型仅仅是给编译器 javac 使用的，确保数据的安全性和免去强制类型转换问题。但是，一旦编译完成，所有和泛型有关的类型会全部擦除。</p>\n<p>为了通过反射操作这些类型，Java 新增了集中类型来代表 <u> 不能被归到 Class 类中的类型 但是 又和原始类型其名 </u> 的类型：</p>\n<ul>\n<li><code>ParameterizedType</code>: 表示一种参数化类型，如：<code>Collection&lt;String&gt;</code></li>\n<li><code>GenericArrayType</code>: 表示一种元素类型是参数化类型或者类型变量的数组类型</li>\n<li><code>TyprVariable</code>：是各种类型变量的公共父接口</li>\n<li><code>WildcardType</code>：代表一种通配符类型表达式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,User&gt; <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        Method method=Test.class.getMethod(<span class=\"string\">&quot;test1&quot;</span>,Map.class,List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Type[] genericParameterTypes=method.getGenericParameterTypes();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Type type:genericParameterTypes)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;#&quot;</span>+type);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</span><br><span class=\"line\">                Type[] actualTypeArguments=((ParameterizedType)type).getActualTypeArguments();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Type actualTypeArgument:actualTypeArguments)&#123;</span><br><span class=\"line\">                    System.out.println(actualTypeArgument);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        method=Test.class.getMethod(<span class=\"string\">&quot;test2&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Type genericReturnType=method.getGenericReturnType();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(genericReturnType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</span><br><span class=\"line\">            Type[] actualTypeArguments=((ParameterizedType)genericReturnType).getActualTypeArguments();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Type actualTypeArgument:actualTypeArguments)&#123;</span><br><span class=\"line\">                System.out.println(actualTypeArgument);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/80a5eb892be94e51bf91aed1c57e8917.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"获取注解信息\"><a href=\"# 获取注解信息\" class=\"headerlink\" title=\"获取注解信息\"></a>获取注解信息</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class=\"line\">        Class c1 = Class.forName(<span class=\"string\">&quot;Test.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射获得注解</span></span><br><span class=\"line\">        Annotation[] annotations=c1.getAnnotations();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">            System.out.println(annotation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取注解的值</span></span><br><span class=\"line\">        MyTable table=(MyTable) c1.getAnnotation(MyTable.class);</span><br><span class=\"line\">        String value=table.value();</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=======================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获得类指定的注解</span></span><br><span class=\"line\">        Field f=c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        MyField annotation=f.getAnnotation(MyField.class);</span><br><span class=\"line\">        System.out.println(annotation.coloumName());</span><br><span class=\"line\">        System.out.println(annotation.type());</span><br><span class=\"line\">        System.out.println(annotation.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 学生类</span></span><br><span class=\"line\"><span class=\"meta\">@MyTable(&quot;db_student&quot;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyField(coloumName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"meta\">@MyField(coloumName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"meta\">@MyField(coloumName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//constructor...</span></span><br><span class=\"line\">    <span class=\"comment\">//getter、setter...</span></span><br><span class=\"line\">    <span class=\"comment\">//toString...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类名的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyTable&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyField&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">coloumName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">type</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/28aae089b10e4ae3bb15eae52d5ecba0.png?x-oss-process=image\" alt=\"在这里插入图片描述\"></p>\n","url":"/posts/12475/","min2read":19,"word4post":"4.3k","prev_post":{"title":"Hello World","url":"/posts/16107/"},"next_post":{"title":"Java 多线程基础","url":"/posts/24112/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Java 注解与反射\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Java 注解与反射 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"注解\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"常见内置注解\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">常见内置注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"元注解\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">元注解 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义注解\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">自定义注解 </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"反射\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">反射 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"概述\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Class 类\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">Class 类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"获取 Class 对象\" href = \"#\"><span class=\"toc-number\">3.2.1.</span> <span class=\"toc-text\">获取 Class 对象 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Java 内存分析\" href = \"#\"><span class=\"toc-number\">3.3.</span> <span class=\"toc-text\">Java 内存分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"类加载过程\" href = \"#\"><span class=\"toc-number\">3.3.1.</span> <span class=\"toc-text\">类加载过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"类的初始化\" href = \"#\"><span class=\"toc-number\">3.3.2.</span> <span class=\"toc-text\">类的初始化 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"类加载器\" href = \"#\"><span class=\"toc-number\">3.3.3.</span> <span class=\"toc-text\">类加载器 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"获取类的运行时结构\" href = \"#\"><span class=\"toc-number\">3.4.</span> <span class=\"toc-text\">获取类的运行时结构 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"动态创建对象\" href = \"#\"><span class=\"toc-number\">3.5.</span> <span class=\"toc-text\">动态创建对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"性能分析\" href = \"#\"><span class=\"toc-number\">3.5.1.</span> <span class=\"toc-text\">性能分析 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"获取泛型信息\" href = \"#\"><span class=\"toc-number\">3.6.</span> <span class=\"toc-text\">获取泛型信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"获取注解信息\" href = \"#\"><span class=\"toc-number\">3.7.</span> <span class=\"toc-text\">获取注解信息</span></a></li></ol></li></ol>","categories":[],"tags":[{"name":"JavaSE","path":"api/tags/JavaSE.json","url":"/tags/JavaSE/"}]}